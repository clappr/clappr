const js = require('@eslint/js')
const globals = require('globals')
const STANDARDJS_RULES = {
  indent: ['error', 2, { SwitchCase: 1 }],
  'linebreak-style': ['error', 'unix'],
  quotes: ['error', 'single', { avoidEscape: true }],
  semi: ['error', 'never'],
  // Spacing rules
  'no-multi-spaces': 'error',
  'space-before-blocks': 'error',
  'space-before-function-paren': [
    'error',
    { anonymous: 'always', named: 'never', asyncArrow: 'always' }
  ],
  'space-in-parens': ['error', 'never'],
  'space-infix-ops': 'error',
  'space-unary-ops': 'error',
  'spaced-comment': ['error', 'always'],
  'keyword-spacing': 'error',
  'comma-spacing': ['error', { before: false, after: true }],
  'key-spacing': ['error', { beforeColon: false, afterColon: true }],
  'object-curly-spacing': ['error', 'always'],
  'array-bracket-spacing': ['error', 'never'],
  'computed-property-spacing': ['error', 'never'],
  'block-spacing': ['error', 'always'],
  'arrow-spacing': ['error', { before: true, after: true }],
  // Code style rules
  'brace-style': ['error', '1tbs', { allowSingleLine: true }],
  'comma-style': ['error', 'last'],
  'comma-dangle': ['error', 'never'],
  'dot-location': ['error', 'property'],
  'eol-last': 'error',
  'func-call-spacing': ['error', 'never'],
  'new-cap': ['error', { newIsCap: true, capIsNew: false }],
  'new-parens': 'error',
  'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0 }],
  'no-trailing-spaces': 'error',
  'no-whitespace-before-property': 'error',
  'operator-linebreak': ['error', 'after', { overrides: { '?': 'before', ':': 'before' } }],
  'padded-blocks': ['error', 'never'],
  'rest-spread-spacing': ['error', 'never'],
  'template-curly-spacing': ['error', 'never'],
  // Variables and declarations
  'no-var': 'error',
  'prefer-const': ['error', { destructuring: 'any' }],
  'no-unused-vars': ['error', { args: 'none' }],
  'no-undef': 'error',
  // Other StandardJS rules
  'accessor-pairs': 'error',
  'constructor-super': 'error',
  curly: ['error', 'multi-line'],
  'dot-notation': ['error', { allowKeywords: true }],
  eqeqeq: ['error', 'always', { null: 'ignore' }],
  'handle-callback-err': ['error', '^(err|error)$'],
  'no-array-constructor': 'error',
  'no-caller': 'error',
  'no-class-assign': 'error',
  'no-cond-assign': 'error',
  'no-const-assign': 'error',
  'no-control-regex': 'error',
  'no-delete-var': 'error',
  'no-dupe-args': 'error',
  'no-dupe-keys': 'error',
  'no-duplicate-case': 'error',
  'no-empty-character-class': 'error',
  'no-empty-pattern': 'error',
  'no-eval': 'error',
  'no-ex-assign': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-parens': ['error', 'functions'],
  'no-fallthrough': 'error',
  'no-floating-decimal': 'error',
  'no-func-assign': 'error',
  'no-implied-eval': 'error',
  'no-inner-declarations': ['error', 'functions'],
  'no-invalid-regexp': 'error',
  'no-irregular-whitespace': 'error',
  'no-iterator': 'error',
  'no-label-var': 'error',
  'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
  'no-lone-blocks': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-new': 'error',
  'no-new-func': 'error',
  'no-new-object': 'error',
  'no-new-require': 'error',
  'no-new-symbol': 'error',
  'no-new-wrappers': 'error',
  'no-obj-calls': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-path-concat': 'error',
  'no-proto': 'error',
  'no-redeclare': 'error',
  'no-regex-spaces': 'error',
  'no-return-assign': ['error', 'except-parens'],
  'no-self-assign': 'error',
  'no-self-compare': 'error',
  'no-sequences': 'error',
  'no-shadow-restricted-names': 'error',
  'no-sparse-arrays': 'error',
  'no-this-before-super': 'error',
  'no-throw-literal': 'error',
  'no-undef-init': 'error',
  'no-unexpected-multiline': 'error',
  'no-unmodified-loop-condition': 'error',
  'no-unreachable': 'error',
  'no-unsafe-finally': 'error',
  'no-useless-call': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-constructor': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': 'error',
  'no-with': 'error',
  'one-var': ['error', { initialized: 'never' }],
  'unicode-bom': ['error', 'never'],
  'use-isnan': 'error',
  'valid-typeof': ['error', { requireStringLiterals: true }],
  'wrap-iife': ['error', 'any', { functionPrototypeMethods: true }],
  'yield-star-spacing': ['error', 'both'],
  yoda: ['error', 'never']
}

module.exports = [
  js.configs.recommended,
  {
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: {
        ...globals.node,
        ...globals.jest,
        ...globals.browser,
        _gaq: false,
        process: false,
        ActiveXObject: false,
        VERSION: false,
        CLAPPR_VERSION: false,
        CLAPPR_CORE_VERSION: false,
        PLAIN_HTML5_ONLY: false,
        sinon: false,
        assert: false
      }
    },
    rules: {
      ...STANDARDJS_RULES,
      'no-console': ['warn', { allow: ['warn', 'error'] }]
    }
  }
]
